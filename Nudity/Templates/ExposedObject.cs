// <auto-generated />

using System;
using System.Linq;
using System.Reflection;

namespace Nudity
{
    internal abstract class ExposedObject
    {
        private Type Type => _wrappedObject.GetType();
        private readonly object _wrappedObject;
        private readonly static BindingFlags BindingFlags = BindingFlags.Instance | 
                                                            BindingFlags.NonPublic | 
                                                            BindingFlags.Public;

        protected ExposedObject(object wrappedObject)
        {
            _wrappedObject = wrappedObject;
        }

        protected T GetField<T>(string fieldName)
        {
            return (T)GetFieldInfo(fieldName).GetValue(_wrappedObject);
        }
        
        protected void SetField<T>(string fieldName, object value)
        {
            GetFieldInfo(fieldName).SetValue(_wrappedObject, value);
        }

        protected T GetProperty<T>(string propertyName)
        {
            return (T)GetPropertyInfo(propertyName).GetValue(_wrappedObject);
        }
        
        protected void SetProperty<T>(string propertyName, object value)
        {
            GetPropertyInfo(propertyName).SetValue(_wrappedObject, value);
        }

        protected T InvokeMethod<T>(string methodName, object[] parameters = null)
        {
            var parameterTypes = parameters.Select(p => p.GetType()).ToArray();
            return (T)GetMethodInfo(methodName, parameterTypes).Invoke(_wrappedObject, parameters);
        }

        private FieldInfo GetFieldInfo(string fieldName)
        {
            var fieldInfo = Type.GetField(fieldName, BindingFlags);
            if (fieldInfo == null)
                throw new MissingMemberException($"Field {fieldName} was not found on {Type}.", fieldName);

            return fieldInfo;
        }
        
        private PropertyInfo GetPropertyInfo(string propertyName)
        {
            var propertyInfo = Type.GetProperty(propertyName, BindingFlags);
            if (propertyInfo == null)
                throw new MissingMemberException($"Property {propertyName} was not found on {Type}.", propertyName);

            return propertyInfo;
        }
        
        private MethodInfo GetMethodInfo(string methodName, Type[] parameterTypes)
        {
            var methodInfo = Type.GetMethod(methodName, BindingFlags, null, CallingConventions.Any, parameterTypes, null);
            if (methodInfo == null)
                throw new MissingMemberException($"Method {methodName} with specified parameters was not found on {Type}.", methodName);

            return methodInfo;
        }
    }
}